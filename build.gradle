plugins {
    id 'java-library'
    id "io.qameta.allure" version "2.9.6"
}

repositories {
    mavenCentral()
}

def allureVersion = "2.17.3",
    selenideVersion = "6.5.2",
    appiumVersion = "8.0.0",
//    appiumVersion = "7.6.0",
    restAssuredVersion = "4.5.1",
    commonsIoVersion = "2.11.0",
    junitVersion = "5.8.2",
    slf4jVersion = "1.7.32",
    javafakerVersion = "1.0.2",
    assertjVersion = "3.22.0",
    ownerVersion = "1.0.12",
    lombokVersion = "1.18.24"

allure
        {
            report {
                version.set(allureVersion)
            }
            adapter {
                aspectjWeaver.set(true)
                frameworks {
                    junit5 {
                        adapterVersion.set(allureVersion)
                    }
                }
            }
        }

dependencies {
    testImplementation(
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.appium:java-client:$appiumVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "commons-io:commons-io:$commonsIoVersion",
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "com.github.javafaker:javafaker:$javafakerVersion",
            "org.assertj:assertj-core:$assertjVersion",
            "org.aeonbits.owner:owner:$ownerVersion",

            testCompileOnly("org.projectlombok:lombok:$lombokVersion"),
            testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")
    )
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperties(System.getProperties())

    useJUnitPlatform() {
        if (System.getProperty("testTag").equals("Search")) {
            includeTags "Search"
        } else if (System.getProperty("testTag").equals("Open")) {
            includeTags "Open"
        } else if (System.getProperty("testTag").equals("Notifications")) {
            includeTags "Notifications"
        } else if (System.getProperty("testTag").equals("AllTests")) {
            includeTags("Search", "Open", "Notifications")
        }
    }

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}